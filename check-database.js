const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = 'https://hqzgndjbxzgsyfoictgo.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhxemduZGpieHpnc3lmb2ljdGdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3MDY5MzMsImV4cCI6MjA3NDI4MjkzM30.szs7OldmsdT9fIW59bW-r44R_VZ8roUvYeJeArK3ClM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkDatabase() {
  try {
    console.log('üîç V√©rification de la base de donn√©es...\n');

    // 1. V√©rifier la table profiles
    console.log('üìã V√©rification de la table profiles...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(5);

    if (profilesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des profils:', profilesError);
    } else {
      console.log(`‚úÖ Table profiles accessible - ${profiles.length} profil(s) trouv√©(s)`);
      if (profiles.length > 0) {
        console.log('üìã Premiers profils:');
        profiles.forEach((profile, index) => {
          console.log(`   ${index + 1}. ${profile.first_name} ${profile.last_name} (${profile.email})`);
          console.log(`      - R√¥le: ${profile.role || 'Non d√©fini'}`);
          console.log(`      - Est h√¥te: ${profile.is_host ? 'Oui' : 'Non'}`);
          console.log(`      - ID: ${profile.user_id}`);
        });
      }
    }

    // 2. V√©rifier la table properties
    console.log('\nüè† V√©rification de la table properties...');
    const { data: properties, error: propertiesError } = await supabase
      .from('properties')
      .select('id, title, host_id, is_active')
      .limit(5);

    if (propertiesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des propri√©t√©s:', propertiesError);
    } else {
      console.log(`‚úÖ Table properties accessible - ${properties.length} propri√©t√©(s) trouv√©e(s)`);
      if (properties.length > 0) {
        console.log('üìã Premi√®res propri√©t√©s:');
        properties.forEach((property, index) => {
          console.log(`   ${index + 1}. ${property.title}`);
          console.log(`      - H√¥te ID: ${property.host_id}`);
          console.log(`      - Active: ${property.is_active ? 'Oui' : 'Non'}`);
        });
      }
    }

    // 3. V√©rifier la table host_applications
    console.log('\nüìù V√©rification de la table host_applications...');
    const { data: applications, error: applicationsError } = await supabase
      .from('host_applications')
      .select('id, full_name, email, status')
      .limit(5);

    if (applicationsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des candidatures:', applicationsError);
    } else {
      console.log(`‚úÖ Table host_applications accessible - ${applications.length} candidature(s) trouv√©e(s)`);
      if (applications.length > 0) {
        console.log('üìã Premi√®res candidatures:');
        applications.forEach((app, index) => {
          console.log(`   ${index + 1}. ${app.full_name} (${app.email})`);
          console.log(`      - Statut: ${app.status}`);
        });
      }
    }

    // 4. V√©rifier la table bookings
    console.log('\nüìÖ V√©rification de la table bookings...');
    const { data: bookings, error: bookingsError } = await supabase
      .from('bookings')
      .select('id, guest_id, status, total_price')
      .limit(5);

    if (bookingsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des r√©servations:', bookingsError);
    } else {
      console.log(`‚úÖ Table bookings accessible - ${bookings.length} r√©servation(s) trouv√©e(s)`);
      if (bookings.length > 0) {
        console.log('üìã Premi√®res r√©servations:');
        bookings.forEach((booking, index) => {
          console.log(`   ${index + 1}. ID: ${booking.id}`);
          console.log(`      - Voyageur ID: ${booking.guest_id}`);
          console.log(`      - Statut: ${booking.status}`);
          console.log(`      - Prix: ${booking.total_price} XOF`);
        });
      }
    }

    // 5. Statistiques g√©n√©rales
    console.log('\nüìä Statistiques g√©n√©rales:');
    
    const { count: profilesCount } = await supabase
      .from('profiles')
      .select('*', { count: 'exact', head: true });
    
    const { count: propertiesCount } = await supabase
      .from('properties')
      .select('*', { count: 'exact', head: true });
    
    const { count: applicationsCount } = await supabase
      .from('host_applications')
      .select('*', { count: 'exact', head: true });
    
    const { count: bookingsCount } = await supabase
      .from('bookings')
      .select('*', { count: 'exact', head: true });

    console.log(`   - Profils: ${profilesCount || 0}`);
    console.log(`   - Propri√©t√©s: ${propertiesCount || 0}`);
    console.log(`   - Candidatures: ${applicationsCount || 0}`);
    console.log(`   - R√©servations: ${bookingsCount || 0}`);

    // 6. V√©rifier les r√¥les sp√©cifiquement
    if (profiles && profiles.length > 0) {
      console.log('\nüëë V√©rification des r√¥les:');
      const roleStats = profiles.reduce((acc, profile) => {
        const role = profile.role || 'Non d√©fini';
        acc[role] = (acc[role] || 0) + 1;
        return acc;
      }, {});

      Object.entries(roleStats).forEach(([role, count]) => {
        console.log(`   - ${role}: ${count} utilisateur(s)`);
      });

      // Chercher jeanbrice270@gmail.com
      const jeanbrice = profiles.find(p => p.email === 'jeanbrice270@gmail.com');
      if (jeanbrice) {
        console.log('\nüéØ jeanbrice270@gmail.com trouv√©:');
        console.log(`   - Nom: ${jeanbrice.first_name} ${jeanbrice.last_name}`);
        console.log(`   - R√¥le: ${jeanbrice.role || 'Non d√©fini'}`);
        console.log(`   - Est h√¥te: ${jeanbrice.is_host ? 'Oui' : 'Non'}`);
        console.log(`   - ID: ${jeanbrice.user_id}`);
      } else {
        console.log('\n‚ùå jeanbrice270@gmail.com non trouv√© dans les profils');
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

// Ex√©cuter la v√©rification
checkDatabase();

