const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = 'https://hqzgndjbxzgsyfoictgo.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhxemduZGpieHpnc3lmb2ljdGdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3MDY5MzMsImV4cCI6MjA3NDI4MjkzM30.szs7OldmsdT9fIW59bW-r44R_VZ8roUvYeJeArK3ClM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testHostApplicationsManagement() {
  try {
    console.log('üîç Test de la gestion des candidatures d\'h√¥te...\n');

    // 1. V√©rifier la table host_applications
    console.log('üìã Test de la table host_applications...');
    
    const { data: applications, error: applicationsError } = await supabase
      .from('host_applications')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);

    if (applicationsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des candidatures:', applicationsError);
      return;
    }

    console.log(`‚úÖ Table host_applications accessible - ${applications.length} candidature(s) trouv√©e(s)`);
    
    if (applications.length > 0) {
      console.log('\nüìä D√©tails des candidatures:');
      applications.forEach((app, index) => {
        console.log(`   ${index + 1}. ${app.title} (${app.status})`);
        console.log(`      - H√¥te: ${app.full_name} (${app.email})`);
        console.log(`      - Type: ${app.property_type} √† ${app.location}`);
        console.log(`      - Prix: ${app.price_per_night} XOF/nuit`);
        console.log(`      - Capacit√©: ${app.max_guests} voyageurs`);
        console.log(`      - Date: ${new Date(app.created_at).toLocaleDateString('fr-FR')}`);
        if (app.admin_notes) {
          console.log(`      - Notes admin: ${app.admin_notes}`);
        }
        console.log('');
      });
    }

    // 2. V√©rifier la table identity_documents
    console.log('üÜî Test de la table identity_documents...');
    
    const { data: identityDocs, error: identityError } = await supabase
      .from('identity_documents')
      .select('*')
      .limit(3);

    if (identityError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des documents d\'identit√©:', identityError);
    } else {
      console.log(`‚úÖ Table identity_documents accessible - ${identityDocs.length} document(s) trouv√©(s)`);
      
      if (identityDocs.length > 0) {
        console.log('\nüìÑ D√©tails des documents:');
        identityDocs.forEach((doc, index) => {
          console.log(`   ${index + 1}. Type: ${doc.document_type}`);
          console.log(`      - Num√©ro: ${doc.document_number}`);
          console.log(`      - Utilisateur: ${doc.user_id}`);
          console.log(`      - Images: ${doc.front_image_url ? 'Recto ‚úì' : 'Recto ‚úó'} | ${doc.back_image_url ? 'Verso ‚úì' : 'Verso ‚úó'}`);
          console.log('');
        });
      }
    }

    // 3. V√©rifier les statistiques par statut
    console.log('üìä Statistiques par statut des candidatures...');
    
    const statusCounts = {
      pending: 0,
      reviewing: 0,
      approved: 0,
      rejected: 0
    };

    applications.forEach(app => {
      if (statusCounts.hasOwnProperty(app.status)) {
        statusCounts[app.status]++;
      }
    });

    console.log('   - En attente:', statusCounts.pending);
    console.log('   - En r√©vision:', statusCounts.reviewing);
    console.log('   - Approuv√©es:', statusCounts.approved);
    console.log('   - Refus√©es:', statusCounts.rejected);

    // 4. V√©rifier la table profiles pour les h√¥tes
    console.log('\nüë• Test de la table profiles (h√¥tes)...');
    
    const { data: hosts, error: hostsError } = await supabase
      .from('profiles')
      .select('user_id, first_name, last_name, email, is_host, role')
      .eq('is_host', true)
      .limit(5);

    if (hostsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des h√¥tes:', hostsError);
    } else {
      console.log(`‚úÖ Table profiles accessible - ${hosts.length} h√¥te(s) trouv√©(s)`);
      
      if (hosts.length > 0) {
        console.log('\nüè† D√©tails des h√¥tes:');
        hosts.forEach((host, index) => {
          console.log(`   ${index + 1}. ${host.first_name} ${host.last_name} (${host.email})`);
          console.log(`      - R√¥le: ${host.role}`);
          console.log(`      - H√¥te: ${host.is_host ? 'Oui' : 'Non'}`);
          console.log('');
        });
      }
    }

    // 5. Test de la fonction d'envoi d'email (simulation)
    console.log('üìß Test de la fonction d\'envoi d\'email...');
    
    try {
      // Simuler un appel √† la fonction send-email
      const testEmailData = {
        type: 'host_application_approved',
        to: 'test@example.com',
        data: {
          hostName: 'Test Host',
          propertyTitle: 'Test Property',
          propertyType: 'apartment',
          location: 'Abidjan'
        }
      };

      console.log('‚úÖ Structure d\'email de test cr√©√©e:', testEmailData);
      console.log('‚ÑπÔ∏è  Note: L\'envoi r√©el n√©cessite une authentification admin');
    } catch (emailError) {
      console.error('‚ùå Erreur lors du test d\'email:', emailError);
    }

    // 6. V√©rifier les permissions RLS
    console.log('\nüîí Test des permissions RLS...');
    
    // Test de lecture anonyme (devrait √©chouer)
    const { data: anonymousData, error: anonymousError } = await supabase
      .from('host_applications')
      .select('id')
      .limit(1);

    if (anonymousError) {
      console.log('‚úÖ RLS fonctionne - Acc√®s anonyme refus√©');
    } else {
      console.log('‚ö†Ô∏è  RLS pourrait ne pas √™tre configur√© correctement');
    }

    console.log('\n‚úÖ Test de la gestion des candidatures d\'h√¥te termin√© avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

// Ex√©cuter le test
testHostApplicationsManagement();

