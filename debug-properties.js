// Script de diagnostic pour v√©rifier les propri√©t√©s dans la base de donn√©es
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://your-project.supabase.co'; // Remplacez par votre URL
const supabaseKey = 'your-anon-key'; // Remplacez par votre cl√©

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkProperties() {
  console.log('üîç V√©rification des propri√©t√©s dans la base de donn√©es...');
  
  try {
    // 1. V√©rifier toutes les propri√©t√©s actives
    const { data: allProperties, error: allError } = await supabase
      .from('properties')
      .select('id, title, is_active, city_id')
      .eq('is_active', true);
    
    if (allError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des propri√©t√©s:', allError);
      return;
    }
    
    console.log(`‚úÖ ${allProperties?.length || 0} propri√©t√©s actives trouv√©es:`);
    allProperties?.forEach(prop => {
      console.log(`  - ${prop.id}: ${prop.title} (ville: ${prop.city_id})`);
    });
    
    // 2. V√©rifier les propri√©t√©s avec leurs villes
    const { data: propertiesWithCities, error: citiesError } = await supabase
      .from('properties')
      .select(`
        id,
        title,
        is_active,
        cities:city_id (
          id,
          name,
          region
        )
      `)
      .eq('is_active', true)
      .limit(5);
    
    if (citiesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration avec villes:', citiesError);
      return;
    }
    
    console.log('\nüèôÔ∏è Propri√©t√©s avec informations de ville:');
    propertiesWithCities?.forEach(prop => {
      console.log(`  - ${prop.id}: ${prop.title}`);
      console.log(`    Ville: ${prop.cities?.name || 'Non d√©finie'} (${prop.cities?.region || 'R√©gion non d√©finie'})`);
    });
    
    // 3. V√©rifier les √©quipements
    const { data: amenities, error: amenitiesError } = await supabase
      .from('property_amenities')
      .select('*')
      .limit(5);
    
    if (amenitiesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des √©quipements:', amenitiesError);
    } else {
      console.log(`\nüè† ${amenities?.length || 0} √©quipements disponibles:`);
      amenities?.forEach(amenity => {
        console.log(`  - ${amenity.name} (${amenity.category})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le diagnostic
checkProperties();


