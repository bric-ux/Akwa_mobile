const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (m√™me que dans l'app mobile)
const supabaseUrl = 'https://hqzgndjbxzgsyfoictgo.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhxemduZGpieHpnc3lmb2ljdGdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3MDY5MzMsImV4cCI6MjA3NDI4MjkzM30.szs7OldmsdT9fIW59bW-r44R_VZ8roUvYeJeArK3ClM';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testMobileSignupFlow() {
  console.log('üì± Test du flux d\'inscription mobile...\n');

  const testEmail = `test-${Date.now()}@example.com`;
  const testPassword = 'TestPassword123!';
  const testFirstName = 'Test';
  const testLastName = 'User';

  try {
    console.log('üîç √âtape 1: Inscription avec Supabase Auth...');
    
    const { data: signupData, error: signupError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          first_name: testFirstName,
          last_name: testLastName,
        },
      },
    });

    if (signupError) {
      console.error('‚ùå Erreur inscription:', signupError);
      return;
    }

    console.log('‚úÖ Inscription r√©ussie');
    console.log('üë§ Utilisateur cr√©√©:', signupData.user?.id);

    if (signupData.user) {
      console.log('\nüîç √âtape 2: Envoi email de bienvenue...');
      
      try {
        const { data: emailData, error: emailError } = await supabase.functions.invoke('send-email', {
          body: {
            type: 'welcome',
            to: testEmail,
            data: {
              firstName: testFirstName || 'Utilisateur'
            }
          }
        });

        if (emailError) {
          console.error('‚ùå Erreur envoi email:', emailError);
        } else {
          console.log('‚úÖ Email de bienvenue envoy√©');
          console.log('üìß ID email:', emailData.id);
        }
      } catch (emailErr) {
        console.error('‚ùå Erreur inattendue email:', emailErr);
      }

      console.log('\nüîç √âtape 3: Cr√©ation du profil...');
      
      try {
        const { error: profileError } = await supabase
          .from('profiles')
          .insert({
            user_id: signupData.user.id,
            first_name: testFirstName,
            last_name: testLastName,
            email: testEmail,
            role: 'user',
            is_host: false,
          });

        if (profileError) {
          console.error('‚ùå Erreur cr√©ation profil:', profileError);
        } else {
          console.log('‚úÖ Profil cr√©√© avec succ√®s');
        }
      } catch (profileErr) {
        console.error('‚ùå Erreur inattendue profil:', profileErr);
      }
    }

    console.log('\nüîç √âtape 4: Nettoyage (suppression du compte de test)...');
    
    // Note: On ne peut pas supprimer le compte via l'API client
    console.log('‚ÑπÔ∏è  Compte de test cr√©√©, √† supprimer manuellement si n√©cessaire');

  } catch (err) {
    console.error('‚ùå Erreur inattendue:', err);
  }

  console.log('\nüìã R√©sum√© du test :');
  console.log('‚úÖ Inscription Supabase Auth');
  console.log('‚úÖ Envoi email de bienvenue');
  console.log('‚úÖ Cr√©ation profil utilisateur');
  console.log('\nüí° Si tout fonctionne ici, le probl√®me est dans l\'app mobile');
}

testMobileSignupFlow();
