const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = 'https://hqzgndjbxzgsyfoictgo.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhxemduZGpieHpnc3lmb2ljdGdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3MDY5MzMsImV4cCI6MjA3NDI4MjkzM30.szs7OldmsdT9fIW59bW-r44R_VZ8roUvYeJeArK3ClM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testHiddenPropertiesAccess() {
  try {
    console.log('üîç Test d\'acc√®s aux propri√©t√©s masqu√©es...\n');

    // 1. R√©cup√©rer toutes les propri√©t√©s pour identifier les masqu√©es
    console.log('üìä R√©cup√©ration de toutes les propri√©t√©s...');
    
    const { data: allProperties, error: allError } = await supabase
      .from('properties')
      .select('id, title, is_active, is_hidden')
      .order('created_at', { ascending: false });

    if (allError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des propri√©t√©s:', allError);
      return;
    }

    console.log(`‚úÖ ${allProperties.length} propri√©t√©(s) trouv√©e(s)`);

    // 2. Identifier les propri√©t√©s masqu√©es
    const hiddenProperties = allProperties.filter(p => p.is_hidden);
    const inactiveProperties = allProperties.filter(p => !p.is_active);
    
    console.log(`\nüìã Propri√©t√©s masqu√©es: ${hiddenProperties.length}`);
    console.log(`üìã Propri√©t√©s inactives: ${inactiveProperties.length}`);

    if (hiddenProperties.length === 0 && inactiveProperties.length === 0) {
      console.log('‚ÑπÔ∏è  Aucune propri√©t√© masqu√©e ou inactive trouv√©e pour le test');
      return;
    }

    // 3. Tester l'acc√®s aux propri√©t√©s masqu√©es
    console.log('\nüîç Test d\'acc√®s aux propri√©t√©s masqu√©es...');
    
    for (const property of hiddenProperties.slice(0, 2)) { // Tester seulement les 2 premi√®res
      console.log(`\nüè† Test de la propri√©t√©: ${property.title} (ID: ${property.id})`);
      
      // Test avec l'ancienne m√©thode (devrait √©chouer)
      console.log('   üìù Test avec filtre is_active=true (ancienne m√©thode)...');
      const { data: oldMethod, error: oldError } = await supabase
        .from('properties')
        .select('id, title, is_active, is_hidden')
        .eq('id', property.id)
        .eq('is_active', true)
        .maybeSingle();

      if (oldError) {
        console.log('   ‚ùå Erreur avec l\'ancienne m√©thode:', oldError.message);
      } else if (oldMethod) {
        console.log('   ‚úÖ Propri√©t√© trouv√©e avec l\'ancienne m√©thode');
      } else {
        console.log('   ‚ö†Ô∏è  Propri√©t√© non trouv√©e avec l\'ancienne m√©thode (masqu√©e)');
      }

      // Test avec la nouvelle m√©thode (devrait r√©ussir)
      console.log('   üìù Test sans filtre is_active (nouvelle m√©thode)...');
      const { data: newMethod, error: newError } = await supabase
        .from('properties')
        .select('id, title, is_active, is_hidden')
        .eq('id', property.id)
        .maybeSingle();

      if (newError) {
        console.log('   ‚ùå Erreur avec la nouvelle m√©thode:', newError.message);
      } else if (newMethod) {
        console.log('   ‚úÖ Propri√©t√© trouv√©e avec la nouvelle m√©thode');
        console.log(`      - Titre: ${newMethod.title}`);
        console.log(`      - Active: ${newMethod.is_active}`);
        console.log(`      - Masqu√©e: ${newMethod.is_hidden}`);
      } else {
        console.log('   ‚ùå Propri√©t√© non trouv√©e avec la nouvelle m√©thode');
      }
    }

    // 4. Tester l'acc√®s aux propri√©t√©s inactives
    console.log('\nüîç Test d\'acc√®s aux propri√©t√©s inactives...');
    
    for (const property of inactiveProperties.slice(0, 2)) { // Tester seulement les 2 premi√®res
      console.log(`\nüè† Test de la propri√©t√©: ${property.title} (ID: ${property.id})`);
      
      // Test avec la nouvelle m√©thode
      const { data: result, error } = await supabase
        .from('properties')
        .select('id, title, is_active, is_hidden')
        .eq('id', property.id)
        .maybeSingle();

      if (error) {
        console.log('   ‚ùå Erreur:', error.message);
      } else if (result) {
        console.log('   ‚úÖ Propri√©t√© trouv√©e');
        console.log(`      - Titre: ${result.title}`);
        console.log(`      - Active: ${result.is_active}`);
        console.log(`      - Masqu√©e: ${result.is_hidden}`);
      } else {
        console.log('   ‚ùå Propri√©t√© non trouv√©e');
      }
    }

    // 5. Test de la fonction getPropertyById simul√©e
    console.log('\nüß™ Test de la fonction getPropertyById simul√©e...');
    
    const testProperty = hiddenProperties[0] || inactiveProperties[0];
    if (testProperty) {
      console.log(`\nüîç Test avec la propri√©t√©: ${testProperty.title}`);
      
      // Simuler la fonction getPropertyById
      const { data: propertyData, error: propertyError } = await supabase
        .from('properties')
        .select(`
          *,
          cities:city_id (
            id,
            name,
            region
          )
        `)
        .eq('id', testProperty.id)
        .maybeSingle();

      if (propertyError) {
        console.log('‚ùå Erreur lors de la r√©cup√©ration:', propertyError.message);
      } else if (propertyData) {
        console.log('‚úÖ Propri√©t√© r√©cup√©r√©e avec succ√®s');
        console.log(`   - Titre: ${propertyData.title}`);
        console.log(`   - Active: ${propertyData.is_active}`);
        console.log(`   - Masqu√©e: ${propertyData.is_hidden}`);
        console.log(`   - Prix: ${propertyData.price_per_night} XOF`);
        console.log(`   - Ville: ${propertyData.cities?.name || 'Non d√©finie'}`);
      } else {
        console.log('‚ùå Propri√©t√© non trouv√©e');
      }
    }

    console.log('\n‚úÖ Test d\'acc√®s aux propri√©t√©s masqu√©es termin√© !');

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

// Ex√©cuter le test
testHiddenPropertiesAccess();

